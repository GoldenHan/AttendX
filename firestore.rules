
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data document
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      let userDoc = getUserData(userId);
      // Check if the document exists and then if the role is 'admin'
      return userDoc.exists && userDoc.data.role == 'admin';
    }

    // Rules for the 'users' collection (staff and admins)
    match /users/{userId} {
      allow read: if request.auth != null; // Authenticated users can read user profiles for selection lists, etc.

      // Allow create if:
      // 1. No one is logged in (e.g., self-signup flow if you had one, though current setup is admin-driven for staff)
      // OR
      // 2. An authenticated user (admin) is creating a document for a *different* user ID (new staff member)
      allow create: if request.auth == null || request.auth.uid != userId;

      // Allow update if:
      // 1. The authenticated user is updating their OWN profile
      // OR
      // 2. The authenticated user is an admin
      allow update: if request.auth != null && (
                      request.auth.uid == userId ||
                      isAdmin(request.auth.uid)
                    );

      // Allow delete only if the authenticated user is an admin
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for the 'students' collection
    match /students/{studentId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || getUserData(request.auth.uid).role == 'teacher'); // Admins and teachers can read student data
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can manage student records directly via this rule set (teacher might do it via specific flows later)
       // Student self-registration or updates would need different/additional rules
    }

    // Rules for 'groups' collection
    match /groups/{groupId} {
      allow read: if request.auth != null; // All authenticated users can read group lists
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can manage groups
    }

    // Rules for 'sessions' collection
    match /sessions/{sessionId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || getUserData(request.auth.uid).role == 'teacher'); // Admins or teachers can create sessions
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can modify/delete sessions
    }

    // Rules for 'attendanceRecords' (student attendance)
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null;
      // Allow create if user is admin or teacher (more specific validation might be in app logic or Cloud Functions)
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || getUserData(request.auth.uid).role == 'teacher');
      allow update: if request.auth != null && isAdmin(request.auth.uid); // Only admins can update
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete
    }

    // Rules for 'teacherAttendanceRecords' (teacher self-attendance)
    match /teacherAttendanceRecords/{recordId} {
      // Allow create if the authenticated user is an admin (admin is logging teacher's arrival via dashboard)
      allow create: if request.auth != null && isAdmin(request.auth.uid);

      // Allow read and delete if the authenticated user is an admin
      allow read, delete: if request.auth != null && isAdmin(request.auth.uid);
      
      allow update: if false; // No updates allowed for now
    }
    
    // Rules for 'appConfiguration'
    match /appConfiguration/{configId} {
      allow read: if request.auth != null; // All authenticated users can read config (e.g. grading)
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Only admins can write config
    }

  }
}

    