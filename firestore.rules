
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    // Helper function to check if a user is a teacher
    function isTeacher(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'teacher';
    }
    
    // Helper function to check if a user is a supervisor
    function isSupervisor(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'supervisor';
    }

    // Helper function to check if a user is a cashier (caja)
    function isCaja(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'caja';
    }
    
    // Helper function to check if a user is a student
    function isStudent(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'student';
    }

    // Helper function to check if the user is updating their own 'requiresPasswordChange' flag to false
    function isUpdatingOwnRequiresPasswordChangeToFalse(userId, request) {
      return request.auth.uid == userId &&
             request.writeFields.size() == 1 &&
             'requiresPasswordChange' in request.writeFields &&
             request.resource.data.requiresPasswordChange == false;
    }

    // Rules for 'users' collection (students, teachers, caja, supervisors, admins)
    match /users/{userId} {
      allow read: if request.auth.uid == userId || 
                     isAdmin(request.auth.uid) || 
                     isTeacher(request.auth.uid) || 
                     isSupervisor(request.auth.uid) || 
                     isCaja(request.auth.uid);
      allow list: if isAdmin(request.auth.uid) || 
                     isTeacher(request.auth.uid) || 
                     isSupervisor(request.auth.uid);
      allow create: if isAdmin(request.auth.uid); // Only admins can create new users directly in this collection (signup flow handles student/staff creation)
      allow update: if isAdmin(request.auth.uid) || 
                       isUpdatingOwnRequiresPasswordChangeToFalse(userId, request);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Rules for 'groups' collection
    match /groups/{groupId} {
      allow read: if request.auth != null; 
      allow list: if request.auth != null; 
      allow create: if isAdmin(request.auth.uid);
      allow update: if isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Rules for 'sessions' collection
    match /sessions/{sessionId} {
      allow read: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isCaja(request.auth.uid);
      allow update: if isAdmin(request.auth.uid) || isTeacher(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }

    // Rules for 'attendanceRecords' collection
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null; 
      allow list: if isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid);
      allow create: if request.auth != null; 
      allow update: if isAdmin(request.auth.uid) || isTeacher(request.auth.uid); 
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Rules for 'teacherAttendanceRecords' collection
    match /teacherAttendanceRecords/{recordId} {
      allow read: if isAdmin(request.auth.uid) || isSupervisor(request.auth.uid) || (isTeacher(request.auth.uid) && request.auth.uid == resource.data.teacherId);
      allow list: if isAdmin(request.auth.uid) || isSupervisor(request.auth.uid);
      allow create: if isAdmin(request.auth.uid); 
      allow update: if isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Rules for 'appConfiguration' (like grading config)
    match /appConfiguration/{configId} {
      allow read: if request.auth != null; 
      allow write: if isAdmin(request.auth.uid); 
    }
    
    // Rules for 'sedes' collection
    match /sedes/{sedeId} {
      allow read: if isAdmin(request.auth.uid) || isSupervisor(request.auth.uid) || isTeacher(request.auth.uid);
      allow list: if isAdmin(request.auth.uid) || isSupervisor(request.auth.uid) || isTeacher(request.auth.uid);
      allow create, update, delete: if isAdmin(request.auth.uid);
    }
  }
}
