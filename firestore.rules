
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Users collection (staff, admins, teachers with auth accounts)
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId; // Users can update their own profile
      allow create: if request.auth != null && getUserData(request.auth.uid).role == 'admin'; // Only admins can create users
      allow delete: if request.auth != null && getUserData(request.auth.uid).role == 'admin';// Only admins can delete users
    }

    // Students collection
    match /students/{studentId} {
      allow read: if request.auth != null;
      // Admins and teachers can manage student records
      allow write: if request.auth != null && getUserData(request.auth.uid).role in ['admin', 'teacher'];
      allow create: if request.auth != null && getUserData(request.auth.uid).role in ['admin', 'teacher'];
      allow delete: if request.auth != null && getUserData(request.auth.uid).role == 'admin';
    }

    // Groups collection
    match /groups/{groupId} {
      allow read: if request.auth != null;
      // Admins and teachers can manage groups
      allow write: if request.auth != null && getUserData(request.auth.uid).role in ['admin', 'teacher'];
    }

    // Sessions collection (for student attendance)
    match /sessions/{sessionId} {
      allow read: if request.auth != null;
      // Admins and teachers can manage sessions
      allow write: if request.auth != null && getUserData(request.auth.uid).role in ['admin', 'teacher'];
    }

    // AttendanceRecords collection (for student attendance)
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null;
      // Admins and teachers can create/update student attendance records
      allow write: if request.auth != null && getUserData(request.auth.uid).role in ['admin', 'teacher'];
      allow delete: if request.auth != null && getUserData(request.auth.uid).role == 'admin';
    }

    // TeacherAttendanceRecords collection
    match /teacherAttendanceRecords/{recordId} {
      // Allow a teacher to create their own attendance record
      allow create: if request.auth != null &&
                       request.resource.data.teacherId == request.auth.uid &&
                       // Optional: Add check for role if teacherId could belong to non-teacher
                       getUserData(request.auth.uid).role == 'teacher' &&
                       // Optional: verify code used matches stored code if needed (requires reading user doc again or passing it in request)
                       request.resource.data.attendanceCodeUsed == getUserData(request.auth.uid).attendanceCode;

      // Only admins can read or delete teacher attendance records
      allow read, delete: if request.auth != null && getUserData(request.auth.uid).role == 'admin';
    }

    // App Configuration (e.g., grading)
    match /appConfiguration/{configId} {
      allow read: if request.auth != null; // Any authenticated user can read configuration
      allow write: if request.auth != null && getUserData(request.auth.uid).role == 'admin'; // Only admins can change configuration
    }
  }
}
