
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function userExists(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    function isAdmin(userId) {
      return request.auth != null && userExists(userId) && getUserRole(userId) == 'admin';
    }

    function isTeacher(userId) {
      return request.auth != null && userExists(userId) && getUserRole(userId) == 'teacher';
    }

    function isSupervisor(userId) {
      return request.auth != null && userExists(userId) && getUserRole(userId) == 'supervisor';
    }

    function isCaja(userId) {
      return request.auth != null && userExists(userId) && getUserRole(userId) == 'caja';
    }
    
    function isStudent(userId) {
      return request.auth != null && userExists(userId) && getUserRole(userId) == 'student';
    }

    function isUpdatingOwnRequiresPasswordChangeToFalse(userId, authUid) {
      let isOwner = authUid == userId;
      let changingRequiresPasswordChange = request.resource.data.keys().hasOnly(['requiresPasswordChange']);
      let newRequiresPasswordChangeIsFalse = request.resource.data.requiresPasswordChange == false;
      // Check if the document exists before trying to access its data
      let currentRequiresPasswordChangeIsTrue = exists(/databases/$(database)/documents/users/$(userId)) &&
                                                get(/databases/$(database)/documents/users/$(userId)).data.requiresPasswordChange == true;

      return isOwner && 
             userExists(userId) && // Ensure user doc exists
             changingRequiresPasswordChange && 
             newRequiresPasswordChangeIsFalse && 
             currentRequiresPasswordChangeIsTrue;
    }

    // Users Collection (students, teachers, admins, caja, supervisors)
    match /users/{userId} {
      // Allow an authenticated user to read their own document.
      // Other staff roles can read any user document for management purposes.
      allow read: if request.auth.uid == userId || 
                     (request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid)));
      
      // Allow listing for staff roles to populate selection dropdowns etc.
      // This rule is broad for listing; consider if more specific queries/functions are needed for stricter security.
      allow list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      
      // Create:
      // - Any authenticated user can create their own document if it matches their UID (e.g., during signup flow, if role is not admin)
      // - Admins can create any user document.
      allow create: if (request.auth.uid == userId && request.resource.data.role != 'admin') || 
                       (request.auth != null && isAdmin(request.auth.uid));
      
      // Update:
      // - Users can update their own profile (but not their role unless they are an admin updating another user, or themselves if they are admin)
      // - Admins can update any user
      // - Users can update their own requiresPasswordChange flag
      allow update: if (request.auth.uid == userId && !(request.resource.data.role != resource.data.role && (resource.data.role == 'admin' || !isAdmin(request.auth.uid) ) ) ) ||
                       (request.auth != null && isAdmin(request.auth.uid)) ||
                       isUpdatingOwnRequiresPasswordChangeToFalse(userId, request.auth.uid);
      
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Sedes Collection
    match /sedes/{sedeId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid));
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Groups Collection
    match /groups/{groupId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Attendance Records Collection
    match /attendanceRecords/{recordId} {
      // Teachers/Admins/Supervisors/Caja can read/list all. Students can read their own.
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid)) || 
                           (isStudent(request.auth.uid) && resource.data.userId == request.auth.uid);
      // Only Teachers, Admins, Supervisors, Caja can create/update/delete
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
    }

    // Teacher Attendance Records Collection
    match /teacherAttendanceRecords/{recordId} {
        allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid) || isTeacher(request.auth.uid)); // Teachers can view their own, admins/supervisors all
        allow create: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid)); // Teachers/Admins/Supervisors can log
        allow update, delete: if request.auth != null && isAdmin(request.auth.uid); // Only Admins can modify/delete
    }

    // Sessions Collection
    match /sessions/{sessionId} {
      allow read, list: if request.auth != null; // Any authenticated user can read sessions
      // Only Teachers, Admins, Supervisors, Caja can create/update/delete
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
    }
    
    // App Configuration (e.g., Grading Config)
    match /appConfiguration/{configId} {
      allow read: if request.auth != null; // Any authenticated user can read config
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Only admins can change it
    }
  }
}

    