
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    function isTeacher(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'teacher';
    }

    function isSupervisor(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'supervisor';
    }

    function isCaja(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'caja';
    }

    function isStudent(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'student';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection (for staff, students, admins with login)
    match /users/{userId} {
      allow read: if request.auth != null && 
                     (isAdmin(request.auth.uid) || 
                      isTeacher(request.auth.uid) || // Teachers might need to read student/other teacher profiles (e.g. for group assignments)
                      isSupervisor(request.auth.uid) || // Supervisors might need to read teacher/student profiles
                      isCaja(request.auth.uid) || // Caja might need to read student profiles
                      isOwner(userId)); // Users can read their own profile
      allow list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid)); // Allow listing for relevant staff roles
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admins can create new user entries (e.g. staff, students via management)
      allow update: if request.auth != null && 
                       (isAdmin(request.auth.uid) || // Admins can update any user
                        (isOwner(userId) && request.writeFields.size() == 1 && request.writeFields[0] == 'requiresPasswordChange' && request.resource.data.requiresPasswordChange == false) || // User updating their own requiresPasswordChange flag
                        (isTeacher(request.auth.uid) && resource.data.role == 'student') // Teacher can update student records they manage (more granular needed later for Sede)
                       );
      allow delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can delete user entries
    }

    // Groups collection
    match /groups/{groupId} {
      allow read: if request.auth != null; // All authenticated users can read group info (students, teachers, admins)
      allow list: if request.auth != null;
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid)); // Admins and Supervisors can manage groups
      // TODO: Add Sede based restrictions for supervisors
    }

    // AttendanceRecords collection
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null; // All authenticated users can read records (for reports, etc.)
      allow list: if request.auth != null;
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isCaja(request.auth.uid) || isSupervisor(request.auth.uid)); // Staff can create attendance
      allow update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid)); // Admins/Supervisors can modify/delete
      // TODO: Add Sede based restrictions
    }
    
    // TeacherAttendanceRecords collection
    match /teacherAttendanceRecords/{recordId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid));
      allow list: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid));
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admin can create this via code (dashboard feature)
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Sessions collection
    match /sessions/{sessionId} {
      allow read: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid)); // Staff can create sessions
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
      // TODO: Add Sede based restrictions
    }
    
    // AppConfiguration collection
    match /appConfiguration/{configId} {
        allow read: if request.auth != null; // All authenticated users can read configuration
        allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can change config
    }

    // Sedes collection
    match /sedes/{sedeId} {
      allow read: if request.auth != null; // All authenticated users can read Sede info
      allow list: if request.auth != null;
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Only Admins can manage Sedes
    }
  }
}
