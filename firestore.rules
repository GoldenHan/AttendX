
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    // Helper function to check if user is an admin
    function isAdmin(userId) {
      return getUserData(userId).role == 'admin';
    }

    // Helper function to check if user is a teacher
    function isTeacher(userId) {
      return getUserData(userId).role == 'teacher';
    }
    
    // Helper function to check if user is caja
    function isCaja(userId) {
      return getUserData(userId).role == 'caja';
    }

    // Users collection:
    // - Admins can read/write/delete any user.
    // - Authenticated users can read their own data.
    // - Authenticated users can update their own data (e.g. name, photoUrl, but not role).
    // - New users can be created (e.g., during sign-up).
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      allow create: if request.auth != null; // Allows signup to create user doc
      allow update: if request.auth != null && 
                       (request.auth.uid == userId && request.resource.data.role == resource.data.role) || // User can update own, but not role
                       isAdmin(request.auth.uid); // Admin can update anything
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Students collection (assuming students don't log in or manage their own Firestore docs directly)
    // - Admins and Teachers can manage student records.
    match /students/{studentId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isCaja(request.auth.uid));
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid));
    }

    // Groups collection:
    // - Admins and Teachers can manage groups.
    // - Authenticated users (including students if needed for their view) can read group info.
    match /groups/{groupId} {
      allow read: if request.auth != null; // Allows all authenticated users to read group info
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid));
    }

    // Sessions collection:
    // - Admins and Teachers can create/update sessions.
    // - All authenticated users can read sessions.
    match /sessions/{sessionId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isCaja(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // AttendanceRecords collection (for students):
    // - Admins, Teachers, Caja can create, read, update records.
    // - Students can potentially read their own records (if needed in future).
    match /attendanceRecords/{recordId} {
      allow read: if request.auth != null && 
                     (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isCaja(request.auth.uid) || 
                      request.auth.uid == resource.data.userId); // Student can read their own
      allow create, update: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isCaja(request.auth.uid));
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // TeacherAttendanceRecords collection:
    // - Records are created by an admin-operated session.
    // - The admin operating the session must be authenticated and have the 'admin' role.
    // - Admins can read/delete these records.
    match /teacherAttendanceRecords/{recordId} {
      allow read, delete: if request.auth != null && isAdmin(request.auth.uid);
      allow create: if request.auth != null && isAdmin(request.auth.uid);
        // The create operation is performed by an admin-operated client.
        // The client logic will verify the teacher's code against the 'users' collection.
        // The rule here just ensures the actor performing the write is an admin.
        // Additional security comes from the client-side validation of the code.
      allow update: if false; // Typically, attendance records are not updated.
    }
    
    // App Configuration (e.g., grading settings)
    // - Only admins can read and write.
    match /appConfiguration/{configId} {
      allow read, write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
