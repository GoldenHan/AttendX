rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Robust helper function to get user data and indicate existence
    function getUserProperties(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      if (!userDoc.exists) {
        return {"exists": false, "role": null}; 
      }
      // Document exists, return its data, ensuring role defaults to null if not present
      return {"exists": true, "role": userDoc.data.role, ...userDoc.data}; 
    }

    function isAdmin(userId) {
      let userProps = getUserProperties(userId);
      return userProps.exists && userProps.role == 'admin';
    }

    function isTeacher(userId) {
      let userProps = getUserProperties(userId);
      return userProps.exists && userProps.role == 'teacher';
    }
    
    function isCaja(userId) {
      let userProps = getUserProperties(userId);
      return userProps.exists && userProps.role == 'caja';
    }

    function isStaff(userId) {
      let userProps = getUserProperties(userId);
      return userProps.exists && (userProps.role == 'admin' || userProps.role == 'teacher' || userProps.role == 'caja');
    }

    match /users/{userId} {
      // LIST: Allow if authenticated. This allows querying by username if an authenticated user (e.g. admin) is performing the lookup.
      // If an unauthenticated user tries to log in by username, this rule will currently block that initial lookup.
      // To allow unauthenticated username lookup, this rule would need to be more permissive (e.g., `allow list: if request.query.limit == 1;` and then secure the read).
      allow list: if request.auth != null;

      // READ: Allow if it's the user's own document OR if the requester is an admin.
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      
      // CREATE: Only admins can create new user documents directly here.
      // Signup flow (AuthContext.signUp) handles user creation in Firebase Auth and Firestore.
      allow create: if request.auth != null && isAdmin(request.auth.uid);

      // UPDATE:
      // 1. Admins can update anything.
      // 2. A user can update their own 'requiresPasswordChange' flag to false.
      allow update: if request.auth != null && (
        isAdmin(request.auth.uid) ||
        (request.auth.uid == userId && request.writeFields.size() == 1 && request.writeFields[0] == 'requiresPasswordChange' && request.resource.data.requiresPasswordChange == false)
      );
      
      // DELETE: Only admins can delete user documents from Firestore. (Firebase Auth account deletion is separate).
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /students/{studentId} {
      // LIST: Allow if authenticated staff. Student username lookup by unauthenticated user will fail with this rule.
      allow list: if request.auth != null && isStaff(request.auth.uid);

      // READ: Staff can read student profiles. Students can read their own if their UID matches studentId (assuming studentId is UID).
      // If studentId is not UID, students cannot read their own profiles with this rule alone.
      allow read: if request.auth != null && (isStaff(request.auth.uid) || request.auth.uid == studentId);
      
      // CREATE, UPDATE, DELETE: Only admins.
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /groups/{groupId} {
      allow read, list: if request.auth != null && isStaff(request.auth.uid);
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /sessions/{sessionId} {
      allow read, list: if request.auth != null && isStaff(request.auth.uid);
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    match /attendanceRecords/{recordId} {
      // Allow read/list by staff, or by the student if the record's userId matches their auth uid.
      allow read, list: if request.auth != null && 
                          (isStaff(request.auth.uid) || 
                           (getUserProperties(request.auth.uid).role == 'student' && resource.data.userId == request.auth.uid)
                          );
      allow create: if request.auth != null && (isTeacher(request.auth.uid) || isAdmin(request.auth.uid) || isCaja(request.auth.uid));
      allow update: if false; 
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    match /teacherAttendanceRecords/{recordId} {
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      allow read, delete: if request.auth != null && isAdmin(request.auth.uid);
      allow update: if false; 
    }

    match /appConfiguration/{configId} {
      allow read: if request.auth != null; 
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
