
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user document exists and has a specific role
    function userHasRole(userId, roleName, collectionName) {
      let userDocPath = /databases/$(database)/documents/$(collectionName)/$(userId);
      return exists(userDocPath) && get(userDocPath).data.role == roleName;
    }

    // Helper function to check if the requesting user is an Admin
    function isAdmin(userId) {
      return userHasRole(userId, 'admin', 'Admins');
    }

    // Helper function to check if the requesting user is a Teacher
    function isTeacher(userId) {
      return userHasRole(userId, 'teacher', 'users');
    }

    // Helper function to check if the requesting user is Caja
    function isCaja(userId) {
      return userHasRole(userId, 'caja', 'users');
    }

    // Helper function to check if the requesting user is a Student
    function isStudent(userId) {
      return userHasRole(userId, 'student', 'users');
    }

    // Helper function to check if the requesting user is a Supervisor
    function isSupervisor(userId) {
      return userHasRole(userId, 'supervisor', 'users');
    }
    
    // Helper function to check if the user is trying to update only their own 'requiresPasswordChange' field to false.
    function isUpdatingOwnRequiresPasswordChangeToFalse(request, resource) {
      return request.auth.uid == resource.id &&
             request.writeFields.size() == 1 &&
             'requiresPasswordChange' in request.writeFields &&
             request.resource.data.requiresPasswordChange == false &&
             (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.requiresPasswordChange == true ||
              get(/databases/$(database)/documents/Admins/$(request.auth.uid)).data.requiresPasswordChange == true);
    }

    // Rules for the 'users' collection (students, teachers, caja, supervisors)
    match /users/{userId} {
      allow read: if request.auth != null && 
                     (isAdmin(request.auth.uid) || 
                      isTeacher(request.auth.uid) || 
                      isCaja(request.auth.uid) ||
                      isSupervisor(request.auth.uid) ||
                      request.auth.uid == userId);
      allow list: if request.auth != null &&
                     (isAdmin(request.auth.uid) || 
                      isTeacher(request.auth.uid) ||
                      isSupervisor(request.auth.uid));
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      allow update: if request.auth != null && 
                       (isAdmin(request.auth.uid) || 
                        isUpdatingOwnRequiresPasswordChangeToFalse(request, resource)
                       );
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for the 'Admins' collection
    match /Admins/{adminId} {
      allow read: if request.auth != null && 
                     (isAdmin(request.auth.uid) || request.auth.uid == adminId); 
      allow list: if request.auth != null && isAdmin(request.auth.uid);
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admins can create other admins
      allow update: if request.auth != null && 
                       (isAdmin(request.auth.uid) || 
                        isUpdatingOwnRequiresPasswordChangeToFalse(request, resource)
                       );
      allow delete: if request.auth != null && isAdmin(request.auth.uid) && request.auth.uid != adminId; // Admins cannot delete themselves
    }

    // Rules for 'students' collection (if it's still used for non-login students)
    // This collection is now primarily superseded by role='student' in 'users'
    match /students/{studentId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid));
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid));
    }

    // Rules for 'groups'
    match /groups/{groupId} {
      allow read, list: if request.auth != null && 
                        (isAdmin(request.auth.uid) || 
                         isTeacher(request.auth.uid) || 
                         isCaja(request.auth.uid) || 
                         isSupervisor(request.auth.uid));
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid));
    }

    // Rules for 'sessions' (related to attendance)
    match /sessions/{sessionId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isCaja(request.auth.uid) || isSupervisor(request.auth.uid));
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid));
    }

    // Rules for 'attendanceRecords'
    match /attendanceRecords/{recordId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isCaja(request.auth.uid) || isSupervisor(request.auth.uid));
      allow create, update, delete: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid));
    }
    
    // Rules for 'teacherAttendanceRecords'
    match /teacherAttendanceRecords/{recordId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid));
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid)); // Admins or Supervisors can register teacher arrivals
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for 'appConfiguration' (like gradingConfig)
    match /appConfiguration/{configId} {
      allow read: if request.auth != null; // All authenticated users can read config
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Only admins can change config
    }
    
    // Rules for 'sedes' collection
    match /sedes/{sedeId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid) || isTeacher(request.auth.uid));
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
