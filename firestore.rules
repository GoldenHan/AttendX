
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin(userId) {
      let adminDocPath = /databases/$(database)/documents/Admins/$(userId);
      return exists(adminDocPath) && get(adminDocPath).data.role == 'admin';
    }

    function isTeacher(userId) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      return exists(userDocPath) && get(userDocPath).data.role == 'teacher';
    }

    function isSupervisor(userId) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      return exists(userDocPath) && get(userDocPath).data.role == 'supervisor';
    }

    function isCaja(userId) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      return exists(userDocPath) && get(userDocPath).data.role == 'caja';
    }

    function isStudent(userId) {
      let userDocPath = /databases/$(database)/documents/users/$(userId);
      return exists(userDocPath) && get(userDocPath).data.role == 'student';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Collection: users (students, teachers, caja, supervisors)
    match /users/{userId} {
      allow read: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        isTeacher(request.auth.uid) || // Teachers might need to read student profiles in their groups
        isSupervisor(request.auth.uid) || // Supervisors might need to read teacher/student profiles in their sedes
        isCaja(request.auth.uid) || // Cashiers might need to read student profiles for payments
        isOwner(userId) // Users can read their own profile
      );
      allow list: if request.auth != null && request.auth.uid != null; // Allow authenticated users to list, specific queries will filter
      
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admins create through staff mgt
      // allow create: if request.auth != null; // For student self-signup (if user creates their own doc in /users with role student)

      allow update: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        (isOwner(userId) && request.writeFields.size() == 1 && request.writeFields[0] == 'requiresPasswordChange' && request.resource.data.requiresPasswordChange == false) ||// User updating their own requiresPasswordChange flag
        (isOwner(userId) && request.resource.data.role == 'student') // Students can update their own profile (limited fields if needed)
      );
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Collection: Admins (administrators only)
    match /Admins/{adminId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || isOwner(adminId)); // Admins can read admin docs, and admins can read their own
      allow list: if request.auth != null && isAdmin(request.auth.uid); // Only admins can list/query admin docs
      allow create: if request.auth != null && isAdmin(request.auth.uid); // Only admins can create new admin users
      allow update: if request.auth != null && isAdmin(request.auth.uid); // Admins can update admin docs
      // allow update: if request.auth != null && (
      //  isAdmin(request.auth.uid) ||
      //  (isOwner(adminId) && request.writeFields.size() == 1 && request.writeFields[0] == 'requiresPasswordChange' && request.resource.data.requiresPasswordChange == false)
      // ); // Admins can update their own password change flag
      allow delete: if request.auth != null && isAdmin(request.auth.uid) && request.auth.uid != adminId; // Admins can delete other admins, but not themselves
    }

    // Collection: groups
    match /groups/{groupId} {
      allow read, list: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        isTeacher(request.auth.uid) ||
        isSupervisor(request.auth.uid) ||
        isCaja(request.auth.uid) || // Cashiers might need to list groups to find students
        isStudent(request.auth.uid) // Students might need to see their group info
      );
      allow create, update, delete: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        isSupervisor(request.auth.uid) // Supervisors can manage groups within their Sede
      );
    }

    // Collection: sessions
    match /sessions/{sessionId} {
      allow read, list: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        isTeacher(request.auth.uid) || 
        isSupervisor(request.auth.uid) ||
        isCaja(request.auth.uid)
      );
      allow create, update, delete: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        isTeacher(request.auth.uid) || // Teachers create sessions for their groups
        isSupervisor(request.auth.uid)
      );
    }

    // Collection: attendanceRecords
    match /attendanceRecords/{recordId} {
      allow read, list: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        isTeacher(request.auth.uid) || 
        isSupervisor(request.auth.uid) ||
        isCaja(request.auth.uid) ||
        (isStudent(request.auth.uid) && resource.data.userId == request.auth.uid) // Students can read their own attendance
      );
      allow create: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        isTeacher(request.auth.uid) || // Teachers log attendance
        isSupervisor(request.auth.uid)
      );
      allow update, delete: if request.auth != null && (
        isAdmin(request.auth.uid) || 
        isSupervisor(request.auth.uid)
      );
    }

    // Collection: appConfiguration (e.g., grading config)
    match /appConfiguration/{configId} {
      allow read: if request.auth != null; // All authenticated users can read configurations
      allow write: if request.auth != null && isAdmin(request.auth.uid); // Only admins can change configurations
    }

    // Collection: sedes
    match /sedes/{sedeId} {
      allow read, list: if request.auth != null && (
        isAdmin(request.auth.uid) ||
        isSupervisor(request.auth.uid) ||
        isTeacher(request.auth.uid) || // Teachers might need to know their Sede
        isCaja(request.auth.uid) // Caja might need Sede context
      );
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Collection: teacherAttendanceRecords
    match /teacherAttendanceRecords/{recordId} {
      allow read, list: if request.auth != null && (
        isAdmin(request.auth.uid) ||
        isSupervisor(request.auth.uid)
      );
      // Teachers log their own, Admins might log for them via system
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid));
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

  }
}

    