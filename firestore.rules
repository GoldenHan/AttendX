
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to check user roles
    function isUserAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    // Robust function to get user role
    function getUserRole(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      // Ensure the document exists and has a 'role' field before accessing it
      return userDoc.exists && 'role' in userDoc.data ? userDoc.data.role : null;
    }

    function isAdmin(userId) {
      return getUserRole(userId) == 'admin';
    }

    function isTeacher(userId) {
      return getUserRole(userId) == 'teacher';
    }

    function isSupervisor(userId) {
      return getUserRole(userId) == 'supervisor';
    }

    function isCaja(userId) {
      return getUserRole(userId) == 'caja';
    }

    function isStudent(userId) {
      return getUserRole(userId) == 'student';
    }

    // Helper function to check if the user is updating only their own allowed fields
    function isUpdatingOwnSafeFields() {
      let allowedFields = ['name', 'phoneNumber', 'photoUrl', 'notes', 'age', 'gender', 'preferredShift', 'level', 'attendanceCode', 'sedeId', 'gradesByLevel']; // Added gradesByLevel
      let incomingData = request.resource.data;

      // User cannot change their own role, email, username, or uid via profile update
      // User also cannot directly modify their own 'requiresPasswordChange' to true
      let disallowedUserUpdates = ['role', 'email', 'username', 'uid'];
      let changingDisallowedField = disallowedUserUpdates.some(field => field in incomingData && incomingData[field] != resource.data[field]);

      if (changingDisallowedField) {
        return false;
      }
      if ('requiresPasswordChange' in incomingData && incomingData.requiresPasswordChange == true && resource.data.requiresPasswordChange == false) {
        return false; // User cannot set their own requiresPasswordChange from false to true
      }

      // Check if all incoming keys are in the allowed list or are implicitly allowed (like requiresPasswordChange when setting to false)
      return incomingData.keys().hasOnly(allowedFields.concat(['requiresPasswordChange']));
    }

    function isUpdatingOwnRequiresPasswordChangeToFalse() {
      // Check if the user is updating their *own* document
      // And if requiresPasswordChange is being set from true to false
      return request.resource.data.requiresPasswordChange == false && resource.data.requiresPasswordChange == true;
    }

    // Rules for the 'users' collection (students, teachers, admins, caja, supervisors)
    match /users/{userId} {
      allow read: if isUserAuthenticated() && (
                    request.auth.uid == userId || // Can read own document
                    isAdmin(request.auth.uid) ||
                    isTeacher(request.auth.uid) ||
                    isSupervisor(request.auth.uid) ||
                    isCaja(request.auth.uid)
                  );
      allow list: if isUserAuthenticated() && (
                    isAdmin(request.auth.uid) ||
                    isTeacher(request.auth.uid) || // For selecting students/teachers
                    isSupervisor(request.auth.uid)
                  );
      allow create: if isUserAuthenticated() && isAdmin(request.auth.uid); // Admin creates new staff/student *records*
      allow update: if isUserAuthenticated() && (
                      (isAdmin(request.auth.uid)) || // Admins can update any user document
                      (request.auth.uid == userId && isUpdatingOwnSafeFields()) || // User can update their own allowed fields
                      (request.auth.uid == userId && isUpdatingOwnRequiresPasswordChangeToFalse()) // User can change their password flag
                    );
      allow delete: if isUserAuthenticated() && isAdmin(request.auth.uid); // Only admins can delete users
    }

    // Rules for 'attendanceRecords'
    match /attendanceRecords/{recordId} {
      allow read, list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow create: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow update: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid)); // Admins or teachers can update
      allow delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // Rules for 'sessions'
    match /sessions/{sessionId} {
      allow read, list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow create: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid));
      allow update, delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // Rules for 'groups'
    match /groups/{groupId} {
      allow read, list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow create, update, delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // Rules for 'appConfiguration' (like grading config)
    match /appConfiguration/{configId} {
      allow read: if isUserAuthenticated(); // All authenticated users can read config
      allow write: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

    // Rules for 'teacherAttendanceRecords'
    match /teacherAttendanceRecords/{recordId} {
        allow read, list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid));
        // Admin or the teacher themselves can create (assuming teacherId in record is their own UID)
        allow create: if isUserAuthenticated() && (isAdmin(request.auth.uid) || (isTeacher(request.auth.uid) && request.resource.data.teacherId == request.auth.uid) || (isSupervisor(request.auth.uid) && request.resource.data.teacherId == request.auth.uid) );
        allow update, delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }

     // Rules for 'sedes'
    match /sedes/{sedeId} {
      allow read, list: if isUserAuthenticated() && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid) || isTeacher(request.auth.uid));
      allow create, update, delete: if isUserAuthenticated() && isAdmin(request.auth.uid);
    }
  }
}
