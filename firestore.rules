
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && 
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';
    }

    function isTeacher(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && 
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'teacher';
    }
    
    function isSupervisor(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && 
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'supervisor';
    }

    function isCaja(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && 
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'caja';
    }

    function isStudent(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && 
             get(/databases/$(database)/documents/users/$(userId)).data.role == 'student';
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid) || isOwner(userId) );
      allow list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid) );
      allow create: if request.auth != null && isAdmin(request.auth.uid);
      // Admin can update any field. Users can update only specific fields on their own doc.
      allow update: if request.auth != null && (
                      isAdmin(request.auth.uid) ||
                      (isOwner(userId) && request.writeFields.size() == 1 && request.writeFields[0] == 'requiresPasswordChange' && request.resource.data.requiresPasswordChange == false)
                    );
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Students collection (assuming this might still exist or be repurposed)
    // If all students are now in `users` with role `student`, this might be deprecated.
    // For now, keeping restrictive rules.
    match /students/{studentId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Groups collection
    match /groups/{groupId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Sessions collection
    match /sessions/{sessionId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid)); // Teachers/Caja can create sessions for logging
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Attendance Records collection
    match /attendanceRecords/{recordId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid) || isCaja(request.auth.uid));
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Teacher Attendance Records collection
    match /teacherAttendanceRecords/{recordId} {
      allow read, list: if request.auth != null && isAdmin(request.auth.uid); // Only Admin can list/read all
      allow create: if request.auth != null && (isAdmin(request.auth.uid) || isTeacher(request.auth.uid) || isSupervisor(request.auth.uid)); // Teachers, Supervisors, Admin can register their own arrival
      allow update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }
    
    // App Configuration collection (e.g., grading config)
    match /appConfiguration/{configId} {
      allow read: if request.auth != null; // All authenticated users can read config
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Sedes collection (New)
    match /sedes/{sedeId} {
      allow read, list: if request.auth != null && (isAdmin(request.auth.uid) || isSupervisor(request.auth.uid) || isTeacher(request.auth.uid)); // Admins, Supervisors, Teachers can read/list sedes
      allow create, update, delete: if request.auth != null && isAdmin(request.auth.uid); // Only Admins can manage sedes
    }
  }
}
